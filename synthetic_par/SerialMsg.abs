// Adapted from bencherl/serialmsg.erl
// A proxying

module SerialMsg;

interface D {
    Unit forward_msg(G g, R r, Int msg);
    Unit forward_done(G g, R r);
}

class Dispatcher implements D {
    Unit forward_msg(G g, R r, Int msg) {
        r ! forwarded_msg(g, msg);
    }
    Unit forward_done(G g, R r) {
        r ! forwarded_done(g);
    }
}

interface G {
    Unit go();
}

class Generator(D d, R r, Int msg) implements G {
    Unit go() {
        while (msg > 0) {
            d ! forward_msg(this,r,msg);
            msg = msg -1;
        }
        d ! forward_done(this,r);
    }
}

interface R {
    Unit forwarded_msg(G g, Int msg);
    Unit forwarded_done(G g);
    Unit finished();
}

class Receiver() implements R {
    Bool isDone = False;
    Unit forwarded_msg(G g, Int msg) {
        // nothing
    }
    Unit forwarded_done(G g) {
        isDone = True;
    }
    Unit finished() {
        await isDone;
    }
}


{
  Int generators = 100;         // same number of generators as receivers
  Int msg = 500;                // number of messages sent per generator
  D d = new Dispatcher();
  Int i = generators;
  List<Fut<Unit>> fs = Nil;
  while (i > 0) {
      R r = new Receiver();
      Fut<Unit> f = r ! finished();
      fs = Cons(f,fs);
      G g = new Generator(d, r, msg);
      g ! go();
      i = i -1;
  }
  while (fs != Nil) {
      Fut<Unit> f = head(fs);
      await f?;
      fs = tail(fs);
  }
}