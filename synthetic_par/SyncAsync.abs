// a benchmark that has n actors that each switch between sync and async calls for a certain depth

module SyncAsync;

interface A {
    Unit async();
}

class Actor(Int depth) implements A {
    Unit async() {
        depth = depth-1;
        if (depth > 0) this.sync();
    }
    Unit sync() {
        depth = depth-1;
        if (depth > 0) {
            Fut<Unit> f = this ! async();
            await f?;
        }
    }
}

{
Int actors = 100;
Int depth = 500;
Int i = actors;
List<Fut<Unit>> fs = Nil;
while (i > 0) {
    A a = new Actor(depth);
    Fut<Unit> f = a ! async();
    fs = Cons(f,fs);
    i = i-1;
}

while (fs != Nil) {
    Fut<Unit> f = head(fs);
    await f?;
    fs = tail(fs);
}

}